pub fn compute() -> String {

    let mut result: u64 = 0;
    let size_of_series: u64 = 13;

    let numbers_from_site: String = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311330358907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397536978179778461740649551492908625693219784686224828397224137565705605749026140797296865241453510047482166370484403199890008895243450658541227588666881178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450".to_string();
    let mut numbers: Vec<u64> = Vec::new();
    for index in 0..numbers_from_site.len() {
        let digit: String = numbers_from_site[index..index + 1].to_string();
        let digit: u64 = match digit.trim().parse() {
            Ok(num) => num,
            Err(_) => 1,      // If the input is invalid, just run problem number 1.
        };            
        numbers.push(digit); 
    }
    for range_start in 0..(numbers_from_site.len() - size_of_series as usize) {
        let series_of_numbers: Vec<u64> = numbers[(range_start as usize)..(range_start + size_of_series as usize)].to_vec();
        let trial = ::euler_library::math_library::series_product(series_of_numbers);
        result = if trial > result { trial } else { result }
    }
    result.to_string()

}
